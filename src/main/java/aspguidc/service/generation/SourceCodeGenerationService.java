package aspguidc.service.generation;

import aspguidc.Main;
import aspguidc.model.GraphicalUserInterfaceDefinition;
import aspguidc.model.information.ProgramInformationDefinition;
import aspguidc.model.input.ProgramInputDefinition;
import aspguidc.model.output.ProgramOutputDefinition;
import aspguidc.service.generation.writer.general.GeneralTemplateWriter;
import aspguidc.service.generation.writer.information.ProgramInformationTemplateWriter;
import aspguidc.service.generation.writer.input.ProgramInputTemplateWriter;
import aspguidc.service.generation.writer.output.ProgramOutputTemplateWriter;
import com.google.common.io.Files;
import com.google.common.reflect.ClassPath;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.util.Set;
import java.util.logging.Logger;

/**
 * Service class which provides method regarding to the generation of the source code of the output program.
 * An instance of this class is assigned to a single target directory, which is used to store the generated source code.
 * <p>
 * The generated source code consists of fixed source files and dynamic source files:
 * Fixed source files are stored in the program_structure folder of the program resources and are copied to the
 * output program source without any modification.
 * Dynamic source files are stored in the program_template folder of the program resources. This files are .twig
 * template files and are processed individually based on the gui definition of the logic program during the generation
 * of the source code of the output program. The template files are processed by the template writer objects inside
 * the writer package.
 */
public class SourceCodeGenerationService {
    private final File targetDirectory;

    /**
     * Create a new generation service instance with the given directory as output directory.
     *
     * @param targetDirectory directory which is used to store the generated source code
     */
    public SourceCodeGenerationService(File targetDirectory) {
        this.targetDirectory = targetDirectory;
    }

    /**
     * Generate the output program source code based on the given gui definition model, logic program file and
     * name of the jar file into the target directory which is assigned to the service instance.
     *
     * @param guiDefinition    gui definition which is used for source code generation
     * @param logicProgramFile logic program file which is copied to the source code directory
     * @param jarFileName      name of the jar file which can be generated by the build file in the source code directory
     * @throws IOException
     */
    public void generateSourceCode(GraphicalUserInterfaceDefinition guiDefinition, File logicProgramFile, String jarFileName) throws IOException {
        Logger.getGlobal().info("[generating] write sourcecode to: '" + this.targetDirectory.getPath() + "'");

        this.initializeSourceCodeDirectory();
        this.generateGeneralCode(guiDefinition, logicProgramFile, jarFileName);
        this.generateProgramInformationCode(guiDefinition.getProgramInformation());
        this.generateProgramInputCode(guiDefinition.getProgramInput());
        this.generateProgramOutputCode(guiDefinition.getProgramOutput());
    }

    /**
     * Initialize the source code output directory which is assigned to the service instance by copying the fixed
     * source files from the program_Structure folder of the program resources into the output directory.
     *
     * @throws IOException
     */
    private void initializeSourceCodeDirectory() throws IOException {
        Logger.getGlobal().info("[generating] initialize source code directory");

        if (!this.targetDirectory.mkdirs() && this.targetDirectory.list().length > 0) {
            throw new FileAlreadyExistsException(this.targetDirectory.getAbsolutePath());
        }

        // copy all files from program_structure folder
        Set<ClassPath.ResourceInfo> resources = ClassPath.from(Main.class.getClassLoader()).getResources();
        for (ClassPath.ResourceInfo r : resources) {
            if (r.getResourceName().startsWith("program_structure")) {
                String normalizedPath = r.getResourceName().replace("program_structure", "");
                File destinationFile = new File(this.targetDirectory, normalizedPath);
                Files.createParentDirs(destinationFile);
                r.asByteSource().copyTo(Files.asByteSink(destinationFile));
            }
        }
    }

    /**
     * Generate dynamic source code files which depend on the program output section of an gui definition.
     *
     * @param programOutput program output definition which is used for source code generation
     * @throws IOException
     */
    private void generateProgramOutputCode(ProgramOutputDefinition programOutput) throws IOException {
        ProgramOutputTemplateWriter outputWriter = new ProgramOutputTemplateWriter(this.targetDirectory);
        outputWriter.writeProgramOutput(programOutput);
    }

    /**
     * Generate dynamic source code files which depend on the program output section of an gui definition.
     *
     * @param programInput program input definition which is used for source code generation
     * @throws IOException
     */
    private void generateProgramInputCode(ProgramInputDefinition programInput) throws IOException {
        ProgramInputTemplateWriter inputWriter = new ProgramInputTemplateWriter(this.targetDirectory);
        inputWriter.writeProgramInput(programInput);
    }

    /**
     * Generate dynamic source code files which depend on the program information section of an gui definition.
     *
     * @param programInformation program information definition which is used for source code generation
     * @throws IOException
     */
    private void generateProgramInformationCode(ProgramInformationDefinition programInformation) throws IOException {
        ProgramInformationTemplateWriter informationWriter = new ProgramInformationTemplateWriter(this.targetDirectory);
        informationWriter.writeProgramInformation(programInformation);
    }

    /**
     * Generate general dynamic source code files based on the given gui definition, logic program file and jar file
     * name.
     *
     * @param guiDefinition    gui definition which is used for source code generation
     * @param logicProgramFile logic program file which is copied to the source code directory
     * @param jarFileName      name of the jar file which can be generated by the build file in the source code directory
     * @throws IOException
     */
    private void generateGeneralCode(GraphicalUserInterfaceDefinition guiDefinition, File logicProgramFile, String jarFileName) throws IOException {
        GeneralTemplateWriter generalWriter = new GeneralTemplateWriter(this.targetDirectory);
        generalWriter.writeBuildFile(guiDefinition.getProgramInformation().getName(), jarFileName);
        generalWriter.writeMainFile(guiDefinition.getProgramInformation().getName(), guiDefinition.getProgramInformation().getAuthor());
        generalWriter.writeLogicProgram(logicProgramFile);
    }

}
