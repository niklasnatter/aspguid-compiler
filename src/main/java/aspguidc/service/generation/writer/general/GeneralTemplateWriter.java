package aspguidc.service.generation.writer.general;

import aspguidc.helper.FileHelper;
import aspguidc.helper.PatternHelper;
import com.google.common.io.Files;
import org.jtwig.JtwigModel;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.logging.Logger;
import java.util.regex.Pattern;

/**
 * Writer class which provides methods for generating general source code files.
 * An instance of this class is assigned to a single target directory, which is used to store the generated source
 * code files.
 */
public class GeneralTemplateWriter {
    private final File sourceCodeDirectory;

    /**
     * Create a new writer instance with the given directory as output directory.
     *
     * @param sourceCodeDirectory directory which is used to write the generated source code into
     */
    public GeneralTemplateWriter(File sourceCodeDirectory) {
        this.sourceCodeDirectory = sourceCodeDirectory;
    }

    /**
     * Generate and write the ant build file to the directory which is assigned to the writer instance.
     *
     * @param projectName string which is used as project name in the build file
     * @param jarFileName file of the jar which is generated by the "jar" target of the build file
     * @throws IOException
     */
    public void writeBuildFile(String projectName, String jarFileName) throws IOException {
        Logger.getGlobal().info("[generating] write build file");

        JtwigModel buildFileModel = JtwigModel.newModel()
                .with("projectName", projectName)
                .with("jarName", jarFileName);

        FileHelper.writeTemplateFile("build.xml", buildFileModel, this.sourceCodeDirectory);
    }

    /**
     * Generate and write the program main file to the directory which is assigned to the writer instance.
     *
     * @param programName program name which is used in the title of the window of the generated program
     * @param author      author which is used in the title of the window of the generated program
     * @throws IOException
     */
    public void writeMainFile(String programName, String author) throws IOException {
        Logger.getGlobal().info("[generating] write program main file");

        JtwigModel programInfoModel = JtwigModel.newModel()
                .with("name", programName)
                .with("author", author);

        FileHelper.writeTemplateFile("src/main/java/aspguidp/Main.java", programInfoModel, this.sourceCodeDirectory);
    }

    /**
     * Write the content of the given logic program file to an new file inside the directory which is assigned to the
     * writer instance.
     * <p>
     * This method filters the gui definition comment from the content of the logic program file, to avoid parsing
     * errors. This is needed, as the current version of dlv does not support multiline comments.
     *
     * @param logicProgramFile file of the logic program of which the content is written to the source code directory
     * @throws IOException
     */
    public void writeLogicProgram(File logicProgramFile) throws IOException {
        Logger.getGlobal().info("[generating] write logic program file");

        Pattern guiCommentPAttern = Pattern.compile(PatternHelper.getGuiDefinitionCommentPattern(), Pattern.DOTALL);
        String fileContent = Files.toString(logicProgramFile, Charset.defaultCharset());
        // filter gui definition comments
        fileContent = guiCommentPAttern.matcher(fileContent).replaceAll("");

        String targetPath = "src/main/resources/asp/logic-program.dl";
        FileHelper.writeFile(new File(this.sourceCodeDirectory, targetPath), fileContent.trim());
    }
}
