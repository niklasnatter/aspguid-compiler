package aspguidc.service.compilation;

import aspguidc.exception.compilation.CompilationFailedException;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DefaultLogger;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.ProjectHelper;

import java.io.File;
import java.io.PrintStream;
import java.nio.file.FileAlreadyExistsException;
import java.util.ArrayList;
import java.util.logging.Logger;

/**
 * Service class which provides methods regarding to compiling java source code to an executable jar file.
 * An instance of this class is assigned to a single directory containing the source code which is compiled.
 */
public class SourceCodeCompilationService {
    private final File sourceCodeDirectory;

    /**
     * Create a new compilation service instance for the given source code directory.
     * <p>
     * The given source code directory must contain a valid ant build file with a target named "jar", which generates
     * a jar file in the root of the directory.
     *
     * @param sourceCodeDirectory directory containing the source code which is processed by the service
     */
    public SourceCodeCompilationService(File sourceCodeDirectory) {
        this.sourceCodeDirectory = sourceCodeDirectory;
    }

    /**
     * Compile the source code inside the directory which is assigned to the service instance into an executable jar
     * file with the given name and move the jar file into the given target directory.
     * <p>
     * The given jar name must match the name of the jar file which is generated by the "jar" target of the ant build
     * file contained in the directory which is assigend to the service instance.
     *
     * @param targetDirectory directory to which the compiled jar file is moved
     * @param targetFileName  name of the compiled jar file
     * @return compiled executable jar file
     * @throws FileAlreadyExistsException if the file with the given file name in the given target directory already
     *                                    exists
     * @throws CompilationFailedException if the compilation of the source code fails
     */
    public File buildJarFile(File targetDirectory, String targetFileName) throws FileAlreadyExistsException, CompilationFailedException {
        Logger.getGlobal().info("[compiling] compile sourcecode to executable: '" + targetFileName + "'");

        // init build logger and execute build
        ListLogger d = new ListLogger();
        d.setMessageOutputLevel(Project.MSG_WARN);
        try {
            File antBuildFile = new File(this.sourceCodeDirectory, "build.xml");
            Project p = new Project();
            p.setUserProperty("ant.file", antBuildFile.getAbsolutePath());
            p.init();
            ProjectHelper h = ProjectHelper.getProjectHelper();
            p.addReference("ant.projectHelper", h);
            h.parse(p, antBuildFile);
            p.addBuildListener(d);
            p.executeTarget("jar");
        } catch (BuildException e) {
            throw new CompilationFailedException(e, d.getLoggedMessages());
        }

        // move generated jar file to target dir
        Logger.getGlobal().info("[compiling] move executable to: '" + targetDirectory.getPath() + "'");

        File jarFile = new File(targetDirectory, targetFileName);
        if (jarFile.exists() || !(new File(this.sourceCodeDirectory, "artifact/" + targetFileName).renameTo(jarFile))) {
            throw new FileAlreadyExistsException(jarFile.getAbsolutePath());
        }

        return jarFile;
    }

    /**
     * Ant BuildListener class which stores the logs of the build process inside an array list.
     * <p>
     * This class is used to create a meaningful exception, if the compilation of a source code directory fails.
     */
    private class ListLogger extends DefaultLogger {
        private final ArrayList<String> loggedMessages = new ArrayList<>();

        @Override
        protected void printMessage(String message, PrintStream stream, int priority) {
            this.loggedMessages.add(message.trim());
            super.printMessage(message.trim(), stream, priority);
        }

        public ArrayList<String> getLoggedMessages() {
            return this.loggedMessages;
        }
    }
}
